{
  "version": 3,
  "sources": ["../src/index.js"],
  "sourcesContent": ["import {\n  BufferGeometry,\n  BufferAttribute,\n  Color,\n  DoubleSide,\n  Mesh,\n  RawShaderMaterial,\n  ShaderMaterial,\n  Vector2,\n  Vector3,\n} from 'three';\n\nconst LEFT_LINE = 0;\nconst RIGHT_LINE = 1;\nconst LEFT_SMOOTH_LINE = 2;\nconst RIGHT_SMOOTH_LINE = 3;\n\nexport class BlurredLine extends Mesh {\n  constructor(curve, material, resolution = 1) {\n    super(undefined, material);\n\n    this.type = 'BlurredLine';\n\n    this._resolution = resolution;\n\n    this.lineWidth = 1.0;\n    this.blurWidth = 1.0;\n    this.blur = true;\n    this.color = new Color();\n    this.opacity = 1.0;\n\n    this.upVector = new Vector3(0.0, 0.0, 1.0);\n\n    this.closed = false;\n\n    this.angleBisection = false; // true: good for 2d\n\n    this.lineShapeVertices = [[]];\n\n    // this.calculateNormals = true;\n\n    this.lineVertices = [];\n    this.curve = curve; // curve to read vertices from\n\n    for (let i = 0; i < this._resolution + 1; i++) {\n      this.lineVertices[i] = new Vector3();\n    }\n\n    this.lineShapeVertices = [];\n    for (let i = 0; i < this._resolution + 1; i++) {\n      var vertices = [];\n      vertices[LEFT_LINE] = new Vector3();\n      vertices[RIGHT_LINE] = new Vector3();\n      vertices[LEFT_SMOOTH_LINE] = new Vector3();\n      vertices[RIGHT_SMOOTH_LINE] = new Vector3();\n      this.lineShapeVertices[i] = vertices;\n    }\n\n    this.createGeometry();\n  }\n\n  createGeometry() {\n    var trianglesCount =\n      (this.lineShapeVertices.length - 1) * (this.blur ? 6 : 2);\n    this.geometry = new BufferGeometry();\n    this.positions = new Float32Array(trianglesCount * 3 * 3);\n    // this.normals = new Float32Array(trianglesCount * 3 * 3);\n    this.vertexColors = new Float32Array(trianglesCount * 3 * 4);\n\n    var positionAttribute = new BufferAttribute(this.positions, 3);\n    // var normalAttribute = new BufferAttribute(this.normals, 3);\n    var colorAttribute = new BufferAttribute(this.vertexColors, 4);\n\n    this.geometry.setAttribute('position', positionAttribute);\n    // this.geometry.setAttribute('normal', normalAttribute);\n    this.geometry.setAttribute('color', colorAttribute);\n    this.geometry.computeBoundingSphere();\n  }\n\n  updateGeometry(filled = false) {\n    // console.log('updateGeometry()');\n\n    if (this.curve !== null) {\n      // console.log( this.curve.getPoints(this._resolution) );\n      this.lineVertices = this.curve.getPoints(this._resolution);\n      if (\n        this.lineVertices.length > 0 &&\n        this.lineVertices[0] instanceof Vector2\n      ) {\n        for (let i = 0; i < this.lineShapeVertices.length; i++) {\n          var v = this.lineVertices[i];\n          this.lineVertices[i] = new Vector3(v.x, v.y, 0.0);\n        }\n      }\n    }\n\n    if (this.lineVertices !== null) {\n      this.geometry.attributes.position.needsUpdate = true;\n      // this.geometry.attributes.normal.needsUpdate = true;\n\n      this.updateLineShapeVertices();\n\n      var lineShapeVertices = this.lineShapeVertices;\n\n      for (let i = 0; i < this.lineShapeVertices.length - 1; i++) {\n        var index = i * 3 * 3 * (this.blur ? 6 : 2);\n\n        if (filled) {\n          // lineAtoms[i].setVertices(this.lineShapeVertices[i][LEFT_LINE],\n          //         lineVertices[i],\n          //         lineVertices[i],\n          //         lineVertices[i + 1],\n          //         lineVertices[i + 1],\n          //         lineShapeVertices[i + 1][LEFT_LINE],\n          //         lineShapeVertices[i + 1][LEFT_SMOOTH_LINE],\n          //         lineShapeVertices[i][LEFT_SMOOTH_LINE]);\n        } else {\n          // 6 triangles:\n\n          // line\n          updatePosition(\n            this.positions,\n            index,\n            lineShapeVertices[i][LEFT_LINE]\n          );\n          updatePosition(\n            this.positions,\n            index + 3,\n            lineShapeVertices[i + 1][LEFT_LINE]\n          );\n          updatePosition(\n            this.positions,\n            index + 6,\n            lineShapeVertices[i][RIGHT_LINE]\n          );\n\n          updatePosition(\n            this.positions,\n            index + 9,\n            lineShapeVertices[i][RIGHT_LINE]\n          );\n          updatePosition(\n            this.positions,\n            index + 12,\n            lineShapeVertices[i + 1][LEFT_LINE]\n          );\n          updatePosition(\n            this.positions,\n            index + 15,\n            lineShapeVertices[i + 1][RIGHT_LINE]\n          );\n\n          if (this.blur) {\n            // left blur\n            updatePosition(\n              this.positions,\n              index + 18,\n              lineShapeVertices[i][LEFT_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 21,\n              lineShapeVertices[i][LEFT_SMOOTH_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 24,\n              lineShapeVertices[i + 1][LEFT_SMOOTH_LINE]\n            );\n\n            updatePosition(\n              this.positions,\n              index + 27,\n              lineShapeVertices[i][LEFT_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 30,\n              lineShapeVertices[i + 1][LEFT_SMOOTH_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 33,\n              lineShapeVertices[i + 1][LEFT_LINE]\n            );\n\n            // right blur\n            updatePosition(\n              this.positions,\n              index + 36,\n              lineShapeVertices[i][RIGHT_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 39,\n              lineShapeVertices[i + 1][RIGHT_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 42,\n              lineShapeVertices[i][RIGHT_SMOOTH_LINE]\n            );\n\n            updatePosition(\n              this.positions,\n              index + 45,\n              lineShapeVertices[i][RIGHT_SMOOTH_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 48,\n              lineShapeVertices[i + 1][RIGHT_LINE]\n            );\n            updatePosition(\n              this.positions,\n              index + 51,\n              lineShapeVertices[i + 1][RIGHT_SMOOTH_LINE]\n            );\n          }\n\n          // flat face normals\n          // if(this.calculateNormals) {\n          //   for(let c = 0; c < 6 * 9; c += 9) {\n          //     var pA = new Vector3(this.positions[index + c + 0], this.positions[index + c + 1], this.positions[index + c + 2]);\n          //     var pB = new Vector3(this.positions[index + c + 3], this.positions[index + c + 4], this.positions[index + c + 5]);\n          //     var pC = new Vector3(this.positions[index + c + 6], this.positions[index + c + 7], this.positions[index + c + 8]);\n          //     var cb = new Vector3().subVectors(pC, pB);\n          //     var ab = new Vector3().subVectors(pA, pB);\n          //     cb.cross(ab);\n          //     cb.normalize();\n          //     updatePosition(this.normals, index + c, cb);\n          //     if(this.blur) {\n          //       updatePosition(this.normals, index + c + 3, cb);\n          //       updatePosition(this.normals, index + c + 6, cb);\n          //     }\n          //   }\n          // } else {\n          //   for(let c = 0; c < 6 * 9; c += 9) {\n          //     updatePosition(this.normals, index + c, this.upVector);\n          //     if(this.blur) {\n          //       updatePosition(this.normals, index + c + 3, this.upVector);\n          //       updatePosition(this.normals, index + c + 6, this.upVector);\n          //     }\n          //   }\n          // }\n        }\n      }\n\n      this.updateColors();\n\n      // this.geometry.computeBoundingSphere();\n    }\n  }\n\n  updateColors() {\n    this.geometry.attributes.color.needsUpdate = true;\n\n    for (let i = 0; i < this.lineShapeVertices.length - 1; i++) {\n      var index = i * 3 * 4 * (this.blur ? 6 : 2);\n\n      const p = i / (this._resolution - 1);\n      var c = this._getColor(p);\n      var o = this._getOpacity(p);\n\n      // line\n      updateColor(this.vertexColors, index, c, o);\n      updateColor(this.vertexColors, index + 4, c, o);\n      updateColor(this.vertexColors, index + 8, c, o);\n\n      updateColor(this.vertexColors, index + 12, c, o);\n      updateColor(this.vertexColors, index + 16, c, o);\n      updateColor(this.vertexColors, index + 20, c, o);\n\n      if (this.blur) {\n        // left blur\n        updateColor(this.vertexColors, index + 24, c, o);\n        updateColor(this.vertexColors, index + 28, c, 0);\n        updateColor(this.vertexColors, index + 32, c, 0);\n\n        updateColor(this.vertexColors, index + 36, c, o);\n        updateColor(this.vertexColors, index + 40, c, 0);\n        updateColor(this.vertexColors, index + 44, c, o);\n\n        // right blur\n        updateColor(this.vertexColors, index + 48, c, o);\n        updateColor(this.vertexColors, index + 52, c, o);\n        updateColor(this.vertexColors, index + 56, c, 0);\n\n        updateColor(this.vertexColors, index + 60, c, 0);\n        updateColor(this.vertexColors, index + 64, c, o);\n        updateColor(this.vertexColors, index + 68, c, 0);\n      }\n    }\n  }\n\n  getLength() {\n    let l = 0.0;\n    for (let i = 0; i < this.lineVertices.length - 1; i++) {\n      l += this.lineVertices[i].distanceTo(this.lineVertices[i + 1]);\n    }\n    return l;\n  }\n\n  // scale widths and alpha by angle and distance ============================\n  // @TODO can this be done in a more simple way?\n  updateLineShapeVertices() {\n    let distancePrevious, distanceCurrent;\n\n    var vectorCurrent = new Vector3();\n    var vectorPrevious = new Vector3();\n    var vectorSide = new Vector3();\n    var vectorSidePrevious = new Vector3();\n    var vectorSideCopy = new Vector3();\n\n    var lineVertices = this.lineVertices;\n\n    for (let i = 0; i < this._resolution; i++) {\n      this.lineShapeVertices[i][LEFT_LINE].copy(lineVertices[i]);\n      this.lineShapeVertices[i][RIGHT_LINE].copy(lineVertices[i]);\n\n      if (this.blur) {\n        this.lineShapeVertices[i][LEFT_SMOOTH_LINE].copy(lineVertices[i]);\n        this.lineShapeVertices[i][RIGHT_SMOOTH_LINE].copy(lineVertices[i]);\n      }\n\n      // previous point to current point ---------------------------------\n      distancePrevious = 0.0;\n      if (i > 0) {\n        vectorPrevious.copy(lineVertices[i - 1]);\n        vectorPrevious.sub(lineVertices[i]);\n        distancePrevious = vectorPrevious.length();\n      } else {\n        if (this.closed) {\n          vectorPrevious.copy(lineVertices[lineVertices.length - 1]);\n          vectorPrevious.sub(lineVertices[i]);\n          distancePrevious = vectorPrevious.length();\n        } else {\n          vectorPrevious.copy(0, 0, 0);\n        }\n      }\n      if (distancePrevious > 0.0) {\n        vectorPrevious.multiplyScalar(1.0 / distancePrevious); // normalize\n      }\n\n      // current point to next point -------------------------------------\n      vectorCurrent.copy(lineVertices[i + 1]);\n      vectorCurrent.sub(lineVertices[i]);\n      distanceCurrent = vectorCurrent.length();\n\n      if (distanceCurrent > 0.0) {\n        vectorCurrent.multiplyScalar(1.0 / distanceCurrent); // normalize\n      }\n\n      if (this.angleBisection) {\n        // calcuate angle bisection (good for 2d):\n        vectorSide.copy(vectorCurrent);\n        vectorSide.add(vectorPrevious);\n\n        if ((distanceCurrent === 0 && distancePrevious === 0) || i === 0) {\n          if (distanceCurrent === 0) {\n            vectorCurrent.set(1, 0, 0);\n          }\n          if (this.closed) {\n            vectorSide.copy(lineVertices[lineVertices.length - 1]);\n            vectorSide.sub(lineVertices[0]);\n          } else {\n            vectorSide.copy(lineVertices[i + 1]);\n            vectorSide.sub(lineVertices[i]);\n          }\n\n          vectorSide.set(-vectorSide.y, vectorSide.x, vectorSide.z);\n        } else {\n          // generate sideVector from upVector, if the sideVector could not be calculated from angle-bisection\n          if (vectorSide.lengthSq() < 0.0001) {\n            vectorSide.copy(this.upVector);\n            vectorSide.cross(vectorCurrent);\n          }\n\n          vectorSidePrevious.copy(this.lineShapeVertices[i - 1][LEFT_LINE]);\n          vectorSidePrevious.sub(lineVertices[i - 1]);\n          if (vectorSide.dot(vectorSidePrevious) < 0) {\n            vectorSide.negate();\n          }\n        }\n      } else {\n        this.calculateSideVector(vectorSide, vectorCurrent, vectorSidePrevious);\n      }\n\n      vectorSide.normalize();\n      vectorSideCopy.copy(vectorSide);\n\n      vectorSide.multiplyScalar(this._getLineWidth(i / this._resolution) / 2.0);\n\n      this.lineShapeVertices[i][LEFT_LINE].add(vectorSide);\n      this.lineShapeVertices[i][RIGHT_LINE].sub(vectorSide);\n\n      if (this.blur) {\n        const p = i / this._resolution;\n        vectorSideCopy.multiplyScalar(\n          this._getLineWidth(p) / 2.0 + this._getBlurWidth(p)\n        );\n\n        this.lineShapeVertices[i][LEFT_SMOOTH_LINE].add(vectorSideCopy);\n        this.lineShapeVertices[i][RIGHT_SMOOTH_LINE].sub(vectorSideCopy);\n      }\n    }\n\n    // add the end point ===================================================\n    this.lineShapeVertices[this._resolution][LEFT_LINE].copy(\n      lineVertices[this._resolution]\n    );\n    this.lineShapeVertices[this._resolution][RIGHT_LINE].copy(\n      lineVertices[this._resolution]\n    );\n\n    if (this.blur) {\n      this.lineShapeVertices[this._resolution][LEFT_SMOOTH_LINE].copy(\n        lineVertices[this._resolution]\n      );\n      this.lineShapeVertices[this._resolution][RIGHT_SMOOTH_LINE].copy(\n        lineVertices[this._resolution]\n      );\n    }\n\n    // current point to next point -----------------------------------------\n    vectorCurrent.copy(lineVertices[this._resolution]);\n    vectorCurrent.sub(lineVertices[this._resolution - 1]);\n    distanceCurrent = vectorCurrent.length();\n    if (distanceCurrent > 0) {\n      vectorCurrent.multiplyScalar(1.0 / distanceCurrent); // normalize\n    }\n\n    if (this.angleBisection) {\n      // calcuate angle bisection (good for 2d):\n\n      vectorSide.copy(vectorCurrent);\n      vectorSide.set(-vectorSide.y, vectorSide.x, vectorSide.z);\n\n      vectorSidePrevious.copy(\n        this.lineShapeVertices[this._resolution - 1][LEFT_LINE]\n      );\n      vectorSidePrevious.sub(lineVertices[this._resolution - 1]);\n      if (vectorSide.dot(vectorSidePrevious) < 0) {\n        vectorSide.negate();\n      }\n    } else {\n      this.calculateSideVector(vectorSide, vectorCurrent, vectorSidePrevious);\n    }\n\n    vectorSide.normalize();\n    vectorSideCopy.copy(vectorSide);\n\n    vectorSide.multiplyScalar(this._getLineWidth(1) / 2.0);\n\n    this.lineShapeVertices[this._resolution][LEFT_LINE].add(vectorSide);\n    this.lineShapeVertices[this._resolution][RIGHT_LINE].sub(vectorSide);\n\n    if (this.blur) {\n      vectorSideCopy.multiplyScalar(\n        this._getLineWidth(1) / 2.0 + this._getBlurWidth(1)\n      );\n\n      this.lineShapeVertices[this._resolution][LEFT_SMOOTH_LINE].add(\n        vectorSideCopy\n      );\n      this.lineShapeVertices[this._resolution][RIGHT_SMOOTH_LINE].sub(\n        vectorSideCopy\n      );\n    }\n\n    if (this.closed) {\n      // this.lineShapeVertices[this._resolution] = this.lineShapeVertices[0];\n\n      this.lineShapeVertices[this._resolution][LEFT_LINE].copy(\n        this.lineShapeVertices[0][LEFT_LINE]\n      );\n      this.lineShapeVertices[this._resolution][RIGHT_LINE].copy(\n        this.lineShapeVertices[0][RIGHT_LINE]\n      );\n      this.lineShapeVertices[this._resolution][LEFT_SMOOTH_LINE].copy(\n        this.lineShapeVertices[0][LEFT_SMOOTH_LINE]\n      );\n      this.lineShapeVertices[this._resolution][RIGHT_SMOOTH_LINE].copy(\n        this.lineShapeVertices[0][RIGHT_SMOOTH_LINE]\n      );\n    }\n  }\n\n  calculateSideVector(vectorSide, vectorCurrent, vectorSidePrevious) {\n    // calculate side vector from upVector (better for 3d):\n\n    vectorSide.copy(vectorCurrent);\n    // if(Math.abs(this.upVector.z) === 1.0) {\n    //   vectorSide.z = 0;\n    // }\n    vectorSide.cross(this.upVector);\n    // vectorSide.lerp(vectorSidePrevious, 0.95);\n    if (vectorSide.lengthSq() < 0.01) {\n      // use previous side vector, if current side vector is too short:\n      vectorSide.copy(vectorSidePrevious);\n    }\n\n    vectorSidePrevious.copy(vectorSide);\n  }\n\n  getInterpolatedPoint(pos) {\n    // position irrespective of length between points:\n\n    let startIndex = 0;\n    let delta = 0.0;\n\n    var totalLength = this.length();\n    let currentLength = 0.0;\n    for (let i = 0; i < this.lineVertices.length - 1; i++) {\n      let l = this.lineVertices[i].distanceTo(this.lineVertices[i + 1]);\n      currentLength += l;\n      if (currentLength / totalLength > pos) {\n        startIndex = i;\n\n        let x = pos * totalLength;\n        let xStart = currentLength - l;\n        let xEnd = currentLength;\n\n        delta = (x - xStart) / (xEnd - xStart);\n\n        break;\n      }\n    }\n\n    var point = new Vector3();\n\n    if (startIndex < this.lineVertices.length - 1) {\n      point.copy(this.lineVertices[startIndex]);\n      point.lerp(this.lineVertices[startIndex + 1], delta);\n    }\n    return point;\n  }\n\n  _getLineWidth(p) {\n    if (this.lineWidthModifier) {\n      return this.lineWidth * this.lineWidthModifier(p);\n    } else {\n      return this.lineWidth;\n    }\n  }\n\n  _getBlurWidth(p) {\n    if (this.blurWidthModifier) {\n      return this.blurWidth * this.blurWidthModifier(p);\n    } else {\n      return this.blurWidth;\n    }\n  }\n\n  _getColor(p) {\n    if (this.colorModifier) {\n      return this.color.clone().multiply(this.colorModifier(p));\n    } else {\n      return this.color;\n    }\n  }\n\n  _getOpacity(p) {\n    if (this.opacityModifier) {\n      return this.opacity * this.opacityModifier(p);\n    } else {\n      return this.opacity;\n    }\n  }\n\n  toString() {\n    return 'BlurredLine';\n  }\n}\n\nfunction updatePosition(positions, index, point) {\n  positions[index] = point.x;\n  positions[index + 1] = point.y;\n  positions[index + 2] = point.z;\n}\n\nfunction updateColor(colors, index, color, alpha = 1) {\n  colors[index] = color.r;\n  colors[index + 1] = color.g;\n  colors[index + 2] = color.b;\n  colors[index + 3] = alpha;\n}\n\nexport class BlurredLineMaterial extends RawShaderMaterial {\n  constructor(parameters) {\n    super();\n\n    if (!parameters) {\n      parameters = {\n        depthTest: false,\n        side: DoubleSide,\n        transparent: true,\n      };\n    } else {\n      if (parameters.depthTest === undefined) parameters.depthTest = false;\n      if (parameters.side === undefined) parameters.side = DoubleSide;\n      if (parameters.transparent === undefined) parameters.transparent = true;\n    }\n\n    this.uniforms = {\n      materialColor: { value: new Color(0xffffff) },\n      opacity: { value: 1.0 },\n    };\n\n    this.color = new Color();\n\n    this.vertexShader = `\n        precision mediump float;\n        precision mediump int;\n\n        uniform mat4 modelViewMatrix; // optional\n        uniform mat4 projectionMatrix; // optional\n\n        attribute vec3 position;\n        attribute vec4 color;\n\n        uniform vec3 materialColor;\n        uniform float opacity;\n\n        // varying vec3 vPosition;\n        varying vec4 vColor;\n\n        void main()\t{\n\n          // vPosition = position;\n          vColor = color * vec4( materialColor, opacity );\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n        }\n      `;\n\n    this.fragmentShader = `\n        precision mediump float;\n        precision mediump int;\n\n        // uniform float time;\n        // uniform float color;\n        // uniform float opacity;\n\n        // varying vec3 vPosition;\n        varying vec4 vColor;\n\n        void main()\t{\n\n          vec4 c = vColor;\n          // c.a *= opacity;\n          // color.r += sin( vPosition.x * 10.0 + time ) * 0.5;\n\n          gl_FragColor = c;\n\n        }\n      `;\n\n    this.type = 'BlurredLineMaterial';\n\n    Object.defineProperties(this, {\n      color: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.materialColor.value;\n        },\n        set: function (value) {\n          this.uniforms.materialColor.value = value;\n        },\n      },\n      opacity: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        },\n      },\n    });\n\n    this.setValues(parameters);\n  }\n\n  copy(source) {\n    ShaderMaterial.prototype.copy.call(this, source);\n\n    this.color.copy(source.color);\n    this.opacity = source.opacity;\n\n    return this;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
